{"version":3,"sources":["components/RandoList/mustache-clipart-7.png","components/RandoList/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItem","title","this","count","RandoList","props","useState","activeItem","setActiveItem","prevActive","setPrevActive","listData","setListData","spinning","setSpinning","useEffect","localforage","setItem","getItem","then","data","Row","Col","className","role","aria-label","xs","map","item","i","key","alt","onClick","stacheClick","src","dance","Form","onSubmit","e","preventDefault","input","target","querySelector","newList","slice","value","length","push","alert","InputGroup","Input","InputGroupAddon","addonType","Button","id","type","size","disabled","block","prev","list","cycles","random","int","goal","index","passes","console","log","setTimeout","cycleToInt","color","sayings","App","Navbar","dark","expand","NavbarBrand","href","Container","toast","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fe28b265.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mustache-clipart-7.914d6585.png\";","import React, { useState, useEffect } from \"react\";\r\nimport localforage from 'localforage';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Form,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  Input,\r\n} from \"reactstrap\";\r\nimport random from \"random\";\r\nimport dance from \"./mustache-clipart-7.png\";\r\nimport './RandoList.css'\r\n\r\nclass ListItem {\r\n  constructor(title) {\r\n    this.title = title;\r\n    this.count = 0;\r\n  }\r\n}\r\n\r\nexport default function RandoList(props) {\r\n  const [activeItem, setActiveItem] = useState(null);\r\n  const [prevActive, setPrevActive] = useState(0);\r\n  const [listData, setListData] = useState(props.listData);\r\n  const [spinning, setSpinning] = useState(false);\r\n\r\n  useEffect(()=>{\r\n    localforage.setItem(\"RandoList\", listData);\r\n  });\r\n\r\n  useEffect(()=>{\r\n    localforage.getItem(\"RandoList\").then(data => {\r\n        data = data || [];\r\n        setListData(data);\r\n    });\r\n  },[]);\r\n\r\n  function cycleToInt(prev, list) {\r\n      setSpinning(true);\r\n    const cycles = random.int(3, 7);\r\n    const goal = random.int(0, list.length - 1);\r\n    let index = prev;\r\n    let passes = 0;\r\n\r\n    console.log(\r\n      \"PASSES\",\r\n      passes,\r\n      \"INDEX\",\r\n      index,\r\n      \"GOAL\",\r\n      goal,\r\n      \"CYCLES\",\r\n      cycles\r\n    );\r\n\r\n    while (passes <= cycles || index !== goal) {\r\n      ++index;\r\n      if (index >= list.length) {\r\n        index = 0;\r\n      }\r\n      console.log(index);\r\n      if (index === prev) {\r\n        console.log(\"PASSED\", prev);\r\n        passes = passes + 1;\r\n      }\r\n\r\n      setActiveItem(null);\r\n    }\r\n    setTimeout(() => {\r\n      setActiveItem(index);\r\n      const newList = listData.slice(0);\r\n      newList[index].count = newList[index].count + 1;\r\n      setListData(newList);\r\n    }, 300);\r\n    setPrevActive(index);\r\n    setTimeout(()=>{\r\n        setSpinning(false);\r\n    }, 1000);\r\n  }\r\n\r\n  function renderList() {\r\n    return listData.map((item, i) => {\r\n      return (\r\n        <li key={i} className={`${activeItem === i ? \"active\" : \"\"}`}>\r\n          {item.title} | {item.count}\r\n        </li>\r\n      );\r\n    });\r\n  }\r\n\r\n  function randomize() {\r\n    cycleToInt(prevActive, listData);\r\n  }\r\n\r\n  function addToList(e) {\r\n    e.preventDefault();\r\n    const input = e.target.querySelector(\"input\");\r\n    const newList = listData.slice(0);\r\n    if (input.value.length > 0){\r\n        newList.push(new ListItem(input.value));\r\n    } else {\r\n        alert('Please enter a value... doodly!');\r\n    }\r\n    setListData(newList);\r\n    input.value = \"\";\r\n  }\r\n\r\n  function clearList(){\r\n      setListData([]);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col className=\"mb-2\">\r\n          <h2><span role=\"img\"aria-label=\"point\">ðŸ‘‰</span> {listData[activeItem] ? listData[activeItem].title : \"\"}</h2>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col xs=\"9\">\r\n          <ul>{renderList()}</ul>\r\n        </Col>\r\n        <Col xs=\"3\">\r\n          <img alt=\"dancer\" onClick={props.stacheClick} className={`img-fluid ${spinning? 'spin' : ''}`} src={dance} />\r\n        </Col>\r\n\r\n        <Col xs=\"12\">\r\n          <Row>\r\n            <Col>\r\n              <Form onSubmit={addToList}>\r\n                <InputGroup>\r\n                  <Input />\r\n                  <InputGroupAddon addonType=\"append\">\r\n                    <Button id=\"add-item-btn\" type=\"submit\">Add an item, strangerino</Button>\r\n                  </InputGroupAddon>\r\n                </InputGroup>\r\n              </Form>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row className=\"footer\">\r\n            <Col xs=\"12\" className=\"mt-3\">\r\n              <Button\r\n                id=\"randomize-btn\"\r\n                size=\"lg\"\r\n                disabled={listData.length <= 1}\r\n                block\r\n                type=\"button\"\r\n                onClick={randomize}\r\n              >\r\n                Ran-diddly-andomize!\r\n              </Button>\r\n            </Col>\r\n            <Col xs=\"12\" className=\"mt-3\">\r\n              <Button\r\n                size=\"lg\"\r\n                disabled={listData.length <= 0}\r\n                color=\"danger\"\r\n                type=\"button\"\r\n                onClick={clearList}\r\n              >\r\n                clear-a-roonie\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  Navbar,\n  NavbarBrand\n} from \"reactstrap\";\nimport { ToastContainer, toast } from 'react-toastify';\n  import 'react-toastify/dist/ReactToastify.css';\n  import random from 'random';\nimport \"./App.css\";\nimport RandoList from \"./components/RandoList\";\n\nconst sayings = [\n  \"I can see your doodle.\",\n  \"What the diddly?\",\n  \"Hi diddly ho neighborinos!\",\n  \"I'm not thinking straight, why did I have that wine cooler last month?\",\n  \"I show you pity, and how do you repay me? With a kick in the kididdlehopper!\",\n  \"Call me Delta Airlines, because I can't handle all your extra baggage.\",\n  \"Thank you for taking me to that Pinkberry place. Itâ€™s a lot less racy than its name would lead you to believe.\",\n  \"I feel a great sadness in my bosom.\",\n  \"You'll find I'm well worth the wait. Like a mild cheddar, I get tangy when I'm sitting on a shelf.\",\n  \"There are some things we don't want to know. Important things.\",\n  \"Now what can I ding dong diddly do for you?\",\n  \"Can I make my famous mimosa? A little sparkling water in a glass full of regular water?\",\n];\n\nexport default function App() {\n\n\n  function makeRandomToast(){\n    toast(sayings[random.int(0, (sayings.length -1))]);\n  }\n\n  return (\n    <>\n      <Navbar color=\"dark\" dark expand=\"md\" id=\"nav\">\n        <NavbarBrand href=\"/\">Flandomize <span role=\"img\"aria-label=\"wave\">ðŸ‘‹</span></NavbarBrand>\n      </Navbar>\n      <Container>\n        <Row>\n          <Col>\n            <RandoList listData={[]} stacheClick={makeRandomToast} />\n          </Col>\n        </Row>\n      </Container>\n      <ToastContainer/>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}